package day35.反射;
//注意，导包是用的反射包中的类
import java.lang.reflect.*;
import java.util.*;
public class Test1 {
	//对属性的操作
	public static void test(String[] args)throws Exception {
		Stu s = new Stu("哈哈",23);
		Class cs = Stu.class;
		
		/*获取某个类的所有public属性*/
//		Field[]fields = cs.getFields();
		//获取某个类中所有声明的属性字段，但不含父类
		Field[]fields = cs.getDeclaredFields();
		for(Field f:fields){
			System.out.println(f.getName());
		}
		/*获取某一项属性*/
		Field f = cs.getDeclaredField("name");
		//设置私有属性可访问
		f.setAccessible(true);
		f.set(s, "tom");
		System.out.println(f.get(s));
	}
	//对方法的操作
	public static void main(String[] args) throws Exception {
		Stu s = new Stu("哈哈",23);
		Class cs = Stu.class;
		/*获取本类及父类中所有的公有方法*/
		//Method[]methods = cs.getMethods();
		/*获取本类中所有的方法,但不包含父类中任何方法 */
		Method[]methods = cs.getDeclaredMethods();
		for(Method m:methods){
			System.out.println(m.getName());
			Class[]arr = m.getParameterTypes();
			System.out.println(Arrays.toString(arr));
		}
		
		Method meth = cs.getDeclaredMethod("add", int.class,int.class);
		Object[]p = {1,2};
		Object obj = meth.invoke(s, p);
		System.out.println(obj);
		
	}
}
